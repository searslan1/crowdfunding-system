package database

import (
	"fmt"
	"log"
	"time"

	"KFS_Backend/configs"
	"KFS_Backend/internal/modules/campaign"
	"KFS_Backend/internal/modules/investment"
	"KFS_Backend/internal/modules/user"
	"KFS_Backend/pkg/logger"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	gormLogger "gorm.io/gorm/logger"
)

var DB *gorm.DB

func ConnectDatabase() {
	config, err := configs.LoadConfig()
	if err != nil {
		log.Fatalf("‚ùå Config y√ºklenirken hata: %v", err)
	}

	sslMode := "require"
	if config.Database.SSLMode == "disable" {
		sslMode = "disable"
	}

	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=%s",
		config.Database.Host, config.Database.User, config.Database.Password,
		config.Database.Name, config.Database.Port, sslMode,
	)

	var dbErr error
	for i := 0; i < 3; i++ {
		DB, dbErr = gorm.Open(postgres.Open(dsn), &gorm.Config{
			Logger: gormLogger.Default.LogMode(gormLogger.Info),
		})

		if dbErr == nil {
			logger.Info("‚úÖ Veritabanƒ±na ba≈üarƒ±yla baƒülandƒ±!")
			break
		}

		logger.Warn(fmt.Sprintf("‚ö†Ô∏è  Veritabanƒ± baƒülantƒ± hatasƒ±: %v", dbErr))
		time.Sleep(3 * time.Second)
	}

	if dbErr != nil {
		logger.Error("‚ùå Veritabanƒ±na baƒülanƒ±lamadƒ±, uygulama durduruluyor!")
		log.Fatal(dbErr)
	}

	sqlDB, err := DB.DB()
	if err != nil || sqlDB.Ping() != nil {
		logger.Error("‚ö†Ô∏è  Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z!")
		log.Fatal(err)
	}

	//RunMigrations()
}

func RunMigrations() {
	logger.Info("üöÄ Migration i≈ülemi ba≈ülatƒ±lƒ±yor...")

	if DB == nil {
		logger.Error("‚ùå Veritabanƒ± baƒülantƒ±sƒ± bo≈ü, migration i≈ülemi iptal edildi!")
		return
	}

	// 1Ô∏è‚É£ √ñnce baƒüƒ±msƒ±z tablolar
	err := DB.AutoMigrate(
		&user.User{}, // Kullanƒ±cƒ± Modeli
	)
	if err != nil {
		logger.Error(fmt.Sprintf("‚ùå User tablosu olu≈üturulamadƒ±: %v", err))
		log.Fatal(err)
	}

	// 2Ô∏è‚É£ Baƒüƒ±mlƒ± tablolarƒ± migrate et
	err = DB.AutoMigrate(
		&user.AuthUser{},          // Kullanƒ±cƒ± Yetkilendirme
		&user.EmailVerification{}, // E-posta doƒürulama
		&user.UserSession{},       // Kullanƒ±cƒ± Oturum Y√∂netimi
		&campaign.Campaign{},      // Kampanya Modeli
		&investment.Investment{},  // Yatƒ±rƒ±m Modeli
	)
	if err != nil {
		logger.Error(fmt.Sprintf("‚ùå Diƒüer tablolar olu≈üturulamadƒ±: %v", err))
		log.Fatal(err)
	}

	logger.Info("‚úÖ Veritabanƒ± migrasyonu tamamlandƒ±!")
}
