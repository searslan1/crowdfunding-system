package middlewares

import (
	"strings"
	// "time"

	"KFS_Backend/configs"
	"KFS_Backend/internal/modules/user"
	"KFS_Backend/internal/utils"

	"github.com/dgrijalva/jwt-go"
	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
)

// JWT doÄŸrulama middleware'i
func JWTMiddleware(db *gorm.DB) fiber.Handler {
	return func(c *fiber.Ctx) error {
		authHeader := c.Get("Authorization")
		if authHeader == "" {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Token eksik"})
		}

		tokenParts := strings.Split(authHeader, "Bearer ")
		if len(tokenParts) != 2 {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "GeÃ§ersiz token formatÄ±"})
		}

		tokenString := tokenParts[1]
		config := configs.LoadJWTConfig()

		// Token'Ä± Ã§Ã¶zÃ¼mle
		token, err := jwt.ParseWithClaims(tokenString, &utils.JWTClaims{}, func(token *jwt.Token) (interface{}, error) {
			return []byte(config.SecretKey), nil
		})
		if err != nil || !token.Valid {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "GeÃ§ersiz veya sÃ¼resi dolmuÅŸ token"})
		}

		claims, ok := token.Claims.(*utils.JWTClaims)
		if !ok {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Token doÄŸrulama hatasÄ±"})
		}

		// **ğŸ“Œ KullanÄ±cÄ±nÄ±n aktif olup olmadÄ±ÄŸÄ±nÄ± kontrol et**
		var userRecord user.User
		if err := db.Where("user_id = ?", claims.UserID).First(&userRecord).Error; err != nil {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "KullanÄ±cÄ± bulunamadÄ±"})
		}

		// **ğŸ“Œ KullanÄ±cÄ±nÄ±n hesabÄ± kilitli mi? (SPK gerekliliÄŸi)**
		// var authRecord user.AuthUser
		// if err := db.Where("user_id = ?", claims.UserID).First(&authRecord).Error; err == nil {
		// 	if authRecord.AccountLockedUntil != nil && time.Now().Before(*authRecord.AccountLockedUntil) {
		// 		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "Hesap kilitli, daha sonra tekrar deneyin."})
		// 	}
		// }

		// // **ğŸ“Œ KullanÄ±cÄ±nÄ±n IP ve cihaz bilgisiyle giriÅŸ yapÄ±p yapmadÄ±ÄŸÄ±nÄ± kontrol et**
		// var session user.UserSession
		// if err := db.Where("user_id = ? AND ip_address = ? AND device_info = ?", claims.UserID, claims.IP, claims.DeviceID).First(&session).Error; err != nil {
		// 	return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "Yetkisiz cihaz veya IP adresi!"})
		// }

		// **ğŸ“Œ KullanÄ±cÄ±nÄ±n rolÃ¼nÃ¼ belirle ve eriÅŸim kontrolÃ¼ yap**
		c.Locals("userID", claims.UserID)
		c.Locals("role", claims.Role)

		return c.Next()
	}
}

/*ğŸ“Œ Yeni Ã–zellikler ve SPK StandartlarÄ±na Uygun GÃ¼ncellemeler
âœ… 1. KullanÄ±cÄ± VarlÄ±k KontrolÃ¼
EÄŸer kullanÄ±cÄ± veritabanÄ±nda yoksa, doÄŸrudan 401 Unauthorized dÃ¶ndÃ¼rÃ¼lÃ¼yor.
âœ… 2. Hesap Kilitlenme KontrolÃ¼
EÄŸer SPK gerekliliklerine gÃ¶re kullanÄ±cÄ± Ã§ok fazla baÅŸarÄ±sÄ±z giriÅŸ yapmÄ±ÅŸsa, account_locked_until alanÄ± kontrol edilerek eriÅŸim reddediliyor.
âœ… 3. Cihaz & IP KontrolÃ¼
KullanÄ±cÄ±nÄ±n token iÃ§erisindeki IP ve cihaz bilgisi, user_sessions tablosundaki oturum bilgisiyle eÅŸleÅŸmeli.
Yetkisiz cihaz veya IP adresi algÄ±lanÄ±rsa, giriÅŸ reddedilir!
âœ… 4. KullanÄ±cÄ± RolÃ¼ne GÃ¶re Yetkilendirme (RBAC)
KullanÄ±cÄ±nÄ±n role bilgisi middleware iÃ§inde belirleniyor.
Ä°leri seviye eriÅŸim kontrolleri yapmak iÃ§in gerekli olan role bilgisi c.Locals() ile diÄŸer handlerâ€™lara aktarÄ±lÄ±yor.*/
