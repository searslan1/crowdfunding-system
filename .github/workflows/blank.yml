name: CI Pipeline

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Frontend klasörü varsa işlemleri çalıştır
      - name: Check if frontend directory exists
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            npm install
            npm run lint
            npm test -- --coverage --reporters=jest-junit
            npm run build
          else
            echo "Frontend directory not found, skipping..."
          fi

      # Test raporlarını kaydet
      - name: Upload Jest Test Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: frontend-test-report
          path: frontend/junit.xml

      - name: Upload Jest Coverage Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: frontend-coverage-report
          path: frontend/coverage

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend klasörü varsa işlemleri çalıştır
      - name: Check if backend directory exists
        run: |
          if [ -d "backend" ]; then
            cd backend
            go mod tidy
            go test ./... -cover -coverprofile=coverage.out
            go build -o app
          else
            echo "Backend directory not found, skipping..."
          fi

      # Test raporlarını kaydet
      - name: Upload Go Test Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: backend-test-report
          path: backend/coverage.out

  integration_tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start Backend Service
        run: |
          cd backend
          go build -o app
          ./app &  # Arka planda başlat

      - name: Run Integration Tests
        run: |
          cd backend
          npm install
          npm test
